// Created by Microsoft (R) C/C++ Compiler Version 15.00.21022.08 (213a37cb).
//
// c:\users\ecog record\documents\jesse's documents\decoding\nervetask\release\tdevaccx.tli
//
// Wrapper implementations for Win32 type library C:\\TDT\\OpenEx\\OCX\\TDevAccX.ocx
// compiler-generated file created 05/03/11 at 10:43:39 - DO NOT EDIT!

#pragma once

//
// dispinterface _DTDevAccX wrapper method implementations
//

inline long _DTDevAccX::ConnectServer ( _bstr_t ServerName ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_I4, (void*)&_result, 
        L"\x0008", (BSTR)ServerName);
    return _result;
}

inline long _DTDevAccX::CheckServerConnection ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline HRESULT _DTDevAccX::CloseConnection ( ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline long _DTDevAccX::WriteTarget ( _bstr_t Target, long nOS, long nWords, float * pData ) {
    long _result = 0;
    _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_I4, (void*)&_result, 
        L"\x0008\x0003\x0003\x4004", (BSTR)Target, nOS, nWords, pData);
    return _result;
}

inline long _DTDevAccX::WriteTargetV ( _bstr_t Target, long nOS, const _variant_t & vData ) {
    long _result = 0;
    _com_dispatch_method(this, 0x5, DISPATCH_METHOD, VT_I4, (void*)&_result, 
        L"\x0008\x0003\x000c", (BSTR)Target, nOS, &vData);
    return _result;
}

inline long _DTDevAccX::ReadTarget ( _bstr_t Target, long nOS, long nWords, float * pData ) {
    long _result = 0;
    _com_dispatch_method(this, 0x6, DISPATCH_METHOD, VT_I4, (void*)&_result, 
        L"\x0008\x0003\x0003\x4004", (BSTR)Target, nOS, nWords, pData);
    return _result;
}

inline _variant_t _DTDevAccX::ReadTargetV ( _bstr_t Target, long nOS, long nWords ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x7, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0008\x0003\x0003", (BSTR)Target, nOS, nWords);
    return _variant_t(_result, false);
}

inline long _DTDevAccX::GetTargetClass ( _bstr_t Target ) {
    long _result = 0;
    _com_dispatch_method(this, 0x8, DISPATCH_METHOD, VT_I4, (void*)&_result, 
        L"\x0008", (BSTR)Target);
    return _result;
}

inline HRESULT _DTDevAccX::ZeroTarget ( _bstr_t Target ) {
    return _com_dispatch_method(this, 0x9, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)Target);
}

inline float _DTDevAccX::GetDeviceSF ( _bstr_t Target ) {
    float _result = 0;
    _com_dispatch_method(this, 0xa, DISPATCH_METHOD, VT_R4, (void*)&_result, 
        L"\x0008", (BSTR)Target);
    return _result;
}

inline long _DTDevAccX::GetTargetSize ( _bstr_t Target ) {
    long _result = 0;
    _com_dispatch_method(this, 0xb, DISPATCH_METHOD, VT_I4, (void*)&_result, 
        L"\x0008", (BSTR)Target);
    return _result;
}

inline double _DTDevAccX::GetTargetVal ( _bstr_t Target ) {
    double _result = 0;
    _com_dispatch_method(this, 0xc, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0008", (BSTR)Target);
    return _result;
}

inline long _DTDevAccX::SetTargetVal ( _bstr_t Target, double Val ) {
    long _result = 0;
    _com_dispatch_method(this, 0xd, DISPATCH_METHOD, VT_I4, (void*)&_result, 
        L"\x0008\x0005", (BSTR)Target, Val);
    return _result;
}

inline long _DTDevAccX::GetDeviceStatus ( _bstr_t Target ) {
    long _result = 0;
    _com_dispatch_method(this, 0xe, DISPATCH_METHOD, VT_I4, (void*)&_result, 
        L"\x0008", (BSTR)Target);
    return _result;
}

inline long _DTDevAccX::GetTargetType ( _bstr_t Target ) {
    long _result = 0;
    _com_dispatch_method(this, 0xf, DISPATCH_METHOD, VT_I4, (void*)&_result, 
        L"\x0008", (BSTR)Target);
    return _result;
}

inline long _DTDevAccX::GetSysMode ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x10, DISPATCH_METHOD, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline _bstr_t _DTDevAccX::GetDeviceName ( long Index ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x11, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0003", Index);
    return _bstr_t(_result, false);
}

inline long _DTDevAccX::GetDeviceType ( _bstr_t DeviceName ) {
    long _result = 0;
    _com_dispatch_method(this, 0x12, DISPATCH_METHOD, VT_I4, (void*)&_result, 
        L"\x0008", (BSTR)DeviceName);
    return _result;
}

inline _bstr_t _DTDevAccX::GetDeviceRCO ( _bstr_t DeviceName ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x13, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0008", (BSTR)DeviceName);
    return _bstr_t(_result, false);
}

inline _bstr_t _DTDevAccX::GetNextTag ( _bstr_t DeviceName, long ReqType, long DoFirst ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x14, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0008\x0003\x0003", (BSTR)DeviceName, ReqType, DoFirst);
    return _bstr_t(_result, false);
}

inline long _DTDevAccX::SetSysMode ( long NewMode ) {
    long _result = 0;
    _com_dispatch_method(this, 0x15, DISPATCH_METHOD, VT_I4, (void*)&_result, 
        L"\x0003", NewMode);
    return _result;
}

inline HRESULT _DTDevAccX::AboutBox ( ) {
    return _com_dispatch_method(this, DISPID_ABOUTBOX, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline long _DTDevAccX::SetTankName ( _bstr_t TankName ) {
    long _result = 0;
    _com_dispatch_method(this, 0x16, DISPATCH_METHOD, VT_I4, (void*)&_result, 
        L"\x0008", (BSTR)TankName);
    return _result;
}

inline _bstr_t _DTDevAccX::GetTankName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x17, DISPATCH_METHOD, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline _variant_t _DTDevAccX::ReadTargetVEX ( _bstr_t Target, long nOS, long nWords, _bstr_t SrcType, _bstr_t DstType ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x18, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0008\x0003\x0003\x0008\x0008", (BSTR)Target, nOS, nWords, (BSTR)SrcType, (BSTR)DstType);
    return _variant_t(_result, false);
}

inline long _DTDevAccX::WriteTargetVEX ( _bstr_t Target, long nOS, _bstr_t DstType, const _variant_t & Buf ) {
    long _result = 0;
    _com_dispatch_method(this, 0x19, DISPATCH_METHOD, VT_I4, (void*)&_result, 
        L"\x0008\x0003\x0008\x000c", (BSTR)Target, nOS, (BSTR)DstType, &Buf);
    return _result;
}
